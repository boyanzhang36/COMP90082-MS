{"version":3,"sources":["helpers/data.helpers.ts","services/http.service.ts","services/config.service.ts","components/app.context.ts","components/withContext/withContext.comp.tsx","components/loader/loader.comp.tsx","helpers/pagination.helpers.ts","components/button/button.comp.tsx","components/infiniteLoader/infiniteLoader.comp.tsx","components/pagination/pagination.comp.tsx","components/table/table.comp.tsx","components/cards/cards.comp.tsx","components/formRow/formRow.comp.tsx","components/queryParams/queryParams.comp.tsx","components/popup/popup.comp.tsx","helpers/file.helpers.ts","components/formPopup/formPopup.comp.tsx","components/filterField/filterField.comp.tsx","common/models/states.types.helper.ts","common/models/config.types.helper.ts","components/page/page.comp.tsx","components/navigation/navigation.comp.tsx","components/customStyles/customStyles.comp.tsx","components/app.tsx","serviceWorker.ts","index.tsx"],"names":["dataHelpers","data","dataPath","attr","extractedData","digProps","split","prop","field","type","arrayType","HttpService","baseUrl","unauthorizedRedirectUrl","errorMessageDataPath","requestHeaders","this","url","indexOf","rawData","outputUrl","Object","keys","forEach","key","urlParamName","replace","queryParams","length","replaceParamsInUrl","params","param","name","value","urlReplaceOnly","push","firstSeparator","join","reqUrl","urlIsAbsolute","origUrl","buildUrl","method","toUpperCase","headers","assign","body","undefined","res","errorMessage","json","path","dataAtPath","extractDataByDataPath","status","statusText","redirectUrl","encodeURIComponent","document","location","href","Error","getErrorMessage","responseType","fetch","ok","text","handleError","buildRequest","makeRequest","httpService","HTTPService","endsWith","import","default","getRemoteConfig","config","isValid","configSchema","require","validate","Ajv","allErrors","verbose","compile","firstError","errors","message","console","error","AppContext","React","createContext","activePage","setError","setActivePage","withAppContext","Component","props","Consumer","context","Loader","className","paginationHelpers","page","parseInt","_page","_itemsPerPage","_total","Button","color","children","InfiniteLoader","Pagination","callbacks","pagination","customLabels","previousTitle","previousPageTitle","nextTitle","nextPageTitle","disabled","hasPreviousPage","onClick","previousPage","title","aria-hidden","hasNextPage","nextPage","Table","items","fields","customActions","editLabel","buttons","editItem","deleteLabel","deleteItem","actionColumnHeader","tableColumnHeaders","actions","paginationCallbacks","getNextPage","getPreviousPage","renderTableRow","item","rowIdx","map","fieldIdx","truncate","origField","origItem","src","alt","label","fieldValue","target","rel","urlLabel","style","backgroundColor","html","htmlCode","dangerouslySetInnerHTML","__html","renderTableCell","put","call","action","idx","icon","delete","renderTableContent","useEffect","clientHeight","window","innerHeight","dataLength","next","hasMore","loader","Cards","renderActions","cardIdx","renderCard","Fragment","renderRow","renderCardSkeleton","duration","startingIndex","Array","from","limit","renderSkeletons","FormRow","direction","showReset","onChange","useState","optionSources","setOptionSources","pageHeaders","addArrayItemLabel","addArrayItem","clearLabel","clearInput","renderArrayItems","originalField","array","itemIdx","inputField","renderFieldInput","fieldName","updatedArray","localValue","splice","removeItemToFieldArray","aria-label","e","preventDefault","addItemToFieldArray","changeCallback","inputProps","defaultPlaceholder","placeholder","readonly","required","checked","optionSource","a","async","actualMethod","result","optionSourceData","option","valuePath","displayPath","display","toast","loadOptionSourceFromRemote","sortBy","finalOptions","options","sortedOptions","orderBy","placeholders","object","number","valueAsNumber","email","password","accept","file","date","originalName","QueryParams","initialParams","paginationConfig","submitCallback","setQueryParams","submit","formChanged","submitAfterChange","updatedQueryParams","filteredParams","filter","includes","onSubmit","queryParam","portalRoot","getElementById","createElement","setAttribute","append","PortalPopup","el","componentDidMount","appendChild","componentWillUnmount","removeChild","ReactDOM","createPortal","Popup","_handleKeyDown","show","closeCallback","keyCode","closeLabel","closeForm","ref","refCallback","addEventListener","bind","removeEventListener","fileHelpers","fieldIndex","unflatten","FormPopup","getSingleConfig","methodConfig","fieldsCopy","JSON","parse","stringify","loading","setLoading","formFields","setFormFields","finalRawData","setFinalRawData","submitForm","finalObject","includeOriginalFields","formData","FormData","containFiles","isMultipartForm","validationError","checkIfFieldIsObject","fileInput","querySelector","files","firstFile","success","updatedFormFields","dataPathSplit","lookupValue","objToLookIn","pathElem","lookup","initFormFields","FilterField","toLowerCase","isQueryPaginationState","obj","source","isBodyPaginationState","isQueryPagination","isBodyPagination","buildInitQueryParamsAndPaginationState","initQueryParams","initialPagination","descending","find","previous","Page","useParams","useHistory","pageMethods","methods","getAllConfig","getAll","infiniteScroll","getSingle","postConfig","post","putConfig","deleteConfig","addItemLabel","addItem","addItemFormTitle","formTitles","editItemFormTitle","openedPopup","setOpenedPopup","setPagination","setItems","setFilter","openEditPopup","updateItem","openCustomActionPopup","performAction","fetchPageData","isArray","dataTransform","orderedItems","total","newPaginationState","getUpdatedPaginationState","getAllRequest","confirm","updatedParams","remove","submitQueryParams","reset","paramsToUrl","queryState","newState","nextPath","prevPath","countPath","nextActivePage","pages","p","pIdx","id","parsedParams","QueryString","search","finalQueryParams","decodeURIComponent","extractQueryParams","description","fieldsToFilter","filterable","currentCountFrom","currentCountTo","itemsCount","renderPaginationStateLabel","filteredItems","passFilter","newPage","renderItemsUI","renderPageContent","refreshData","Navigation","isOpened","setIsOpened","to","activeClassName","CustomStyles","cssVars","styles","vars","arr","defaultAppName","changeFavicon","link","oldLink","head","App","firstLoad","setFirstLoad","setConfig","appName","loadConfig","windowConfig","RESTool","remoteConfig","ConfigService","loadDefaultConfig","favicon","remoteUrl","validateConfig","Provider","customStyles","scrollDuration","cosParameter","scrollY","scrollCount","oldTimestamp","performance","now","requestAnimationFrame","step","newTimestamp","Math","PI","scrollTo","round","cos","scrollToTop","exact","component","position","POSITION","TOP_CENTER","autoClose","draggable","Boolean","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2479a4af.chunk.js","sourcesContent":["import { IConfigInputField } from \"../common/models/config.model\";\r\n\r\nclass DataHelpers {\r\n\r\n  public extractDataByDataPath(data: any, dataPath: string, attr: string | null = null) {\r\n    if (!data || !dataPath) {\r\n      if (attr) {\r\n        return data[attr];\r\n      }\r\n      return data;\r\n    }\r\n\t\r\n    let extractedData: any = data;\r\n    const digProps: string[] = dataPath.split('.');\r\n\r\n    for (let prop of digProps) {\r\n      if (typeof extractedData[prop] !== 'undefined') {\r\n        extractedData = extractedData[prop];\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (typeof extractedData === 'undefined') {\r\n      return null;\r\n    }\r\n\r\n    if (attr) {\r\n      return extractedData[attr];\r\n    }\r\n\r\n    return extractedData;\r\n  }\r\n\r\n  public checkIfFieldIsObject(field: IConfigInputField): boolean {\r\n    if (field.type === 'object') {\r\n      return true;\r\n    }\r\n\r\n    if (field.type === 'array') {\r\n      if (!field.arrayType || field.arrayType === 'object') {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n}\r\n\r\nexport const dataHelpers = new DataHelpers();","import { TConfigMethod, IQueryParam } from '../common/models/config.model';\r\nimport { dataHelpers } from '../helpers/data.helpers';\r\n\r\nexport type ResponseType = 'json' | 'text' | 'boolean' | 'status';\r\n\r\nexport interface IFetchParams {\r\n  origUrl: string\r\n  method?: TConfigMethod\r\n  headers?: any\r\n  queryParams?: IQueryParam[]\r\n  rawData?: any\r\n  body?: any\r\n  responseType?: ResponseType\r\n}\r\n\r\nclass HttpService {\r\n  public baseUrl: string;\r\n  public unauthorizedRedirectUrl: string;\r\n  public errorMessageDataPath: string | string[];\r\n  public requestHeaders: any;\r\n\r\n  constructor(baseUrl: string = '', unauthorizedRedirectUrl: string = '', errorMessageDataPath: string = '') {\r\n    this.baseUrl = baseUrl || '';\r\n    this.unauthorizedRedirectUrl = unauthorizedRedirectUrl || '';\r\n    this.errorMessageDataPath = errorMessageDataPath || '';\r\n    this.requestHeaders = {};\r\n  }\r\n\r\n  private urlIsAbsolute(url: string) {\r\n    if (url.indexOf('http') === 0 || url.indexOf('https') === 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private replaceParamsInUrl(url: string, rawData?: any): string {\r\n    if (!rawData || typeof rawData !== 'object') {\r\n      return url;\r\n    }\r\n\r\n    let outputUrl = url;\r\n\r\n    Object.keys(rawData).forEach((key) => {\r\n      const urlParamName = `:${key}`;\r\n      outputUrl = outputUrl.replace(urlParamName, rawData[key] as string);\r\n    });\r\n\r\n    return outputUrl;\r\n  }\r\n\r\n  private buildUrl(url: string, queryParams: IQueryParam[] = [], rawData?: any): string {\r\n    if (!queryParams || !queryParams.length) {\r\n      return this.replaceParamsInUrl(url, rawData);\r\n    }\r\n\r\n    let outputUrl = url;\r\n    const params = [];\r\n\r\n    for (let param of queryParams) {\r\n      if (!param.name || typeof param.value === 'undefined') {\r\n        continue;\r\n      }\r\n\r\n      // TODO: Add docs to \"urlReplaceOnly\"\r\n      if (param.urlReplaceOnly) {\r\n        const urlParamName = `:${param.name}`;\r\n        outputUrl = outputUrl.replace(urlParamName, param.value as string);\r\n      } else {\r\n        params.push(`${param.name}=${param.value || ''}`);\r\n      }\r\n    }\r\n\r\n    if (params.length) {\r\n      const firstSeparator = url.indexOf('?') >= 0 ? '&' : '?';\r\n      return outputUrl + firstSeparator + params.join('&');\r\n    }\r\n\r\n    return outputUrl;\r\n  }\r\n\r\n  private buildRequest(params: IFetchParams): { url: string, params: any } {\r\n    const reqUrl: string = this.urlIsAbsolute(params.origUrl) ? params.origUrl : this.baseUrl + params.origUrl;\r\n    const finalUrl: string = this.buildUrl(reqUrl, params.queryParams, params.rawData);\r\n    const requestParams = {\r\n      method: params.method ? params.method.toUpperCase() : 'GET',\r\n      headers: Object.assign({}, this.requestHeaders, params.headers || {}),\r\n      body: params.method === 'post' || params.method === 'put' || params.method === 'patch' ? params.body : undefined\r\n    };\r\n\r\n    return {\r\n      url: finalUrl,\r\n      params: requestParams\r\n    };\r\n  }\r\n\r\n  private async getErrorMessage(res: Response | any): Promise<string> {\r\n    let errorMessage: string = '';\r\n\r\n    try {\r\n      const body = await res.json();\r\n\r\n      for (const path of this.errorMessageDataPath) {\r\n        const dataAtPath = dataHelpers.extractDataByDataPath(body, path);\r\n\r\n        if (dataAtPath) {\r\n          errorMessage = dataAtPath;\r\n        }\r\n      }\r\n    } catch { } // TODO: proper handling of errors (^.^)\r\n\r\n    return errorMessage && errorMessage.length ?\r\n      errorMessage :\r\n      `${res.status} - ${res.statusText || ''}`;\r\n  }\r\n\r\n  private async handleError(res: Response) {\r\n    // In case response status is \"Unauthorized\", redirect to relevant url\r\n    if (res.status === 401 && this.unauthorizedRedirectUrl) {\r\n      const redirectUrl: string = this.unauthorizedRedirectUrl.replace(':returnUrl', encodeURIComponent(document.location.href));\r\n      document.location.href = redirectUrl;\r\n      return;\r\n    }\r\n\r\n    throw new Error(await this.getErrorMessage(res));\r\n  }\r\n\r\n  private async makeRequest(url: string, params: any = {}, responseType: ResponseType = 'json') {\r\n    const res: Response = await fetch(url, Object.assign({}, params, {}));\r\n\r\n    if (res.ok) {\r\n      switch (responseType) {\r\n        case 'json':\r\n          return await res.json();\r\n        case 'text':\r\n          return await res.text();\r\n        case 'boolean':\r\n          return true;\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n\r\n    await this.handleError(res);\r\n  }\r\n\r\n  public async fetch({ method, origUrl, queryParams, rawData, body, headers, responseType }: IFetchParams) {\r\n    const { url, params } = this.buildRequest({ method, origUrl, queryParams, rawData, body, headers });\r\n    return await this.makeRequest(url, params, responseType);\r\n  }\r\n}\r\n\r\nexport default HttpService;\r\n","import HTTPService from './http.service';\r\nimport { IConfig } from '../common/models/config.model';\r\nimport Ajv from 'ajv';\r\n\r\nconst httpService: HTTPService = new HTTPService();\r\n\r\nclass ConfigService extends HTTPService {\r\n\r\n  public async getRemoteConfig(url: string) {\r\n    if (url.endsWith('.js')) {\r\n      return (await import(/* webpackIgnore: true */url)).default;\r\n    }\r\n    return await httpService.fetch({\r\n      origUrl: url,\r\n    });\r\n  }\r\n\r\n  public async loadDefaultConfig() {\r\n    try {\r\n      return await this.getRemoteConfig('./config.json');\r\n    } catch (e) {\r\n      return (await this.getRemoteConfig('./config.js'));\r\n    }\r\n  }\r\n\r\n  public validateConfig(config: IConfig | null): { isValid: boolean, errorMessage: string | null } {\r\n    if (config === null) {\r\n      return {\r\n        isValid: true,\r\n        errorMessage: null,\r\n      }\r\n    }\r\n    const configSchema = require('../assets/schemas/config.schema.json');\r\n    const ajv = new Ajv({\r\n      allErrors: true,\r\n      verbose: true,\r\n    });\r\n    const validate = ajv.compile(configSchema);\r\n    const isValid = validate(config);\r\n    if (typeof isValid !== 'boolean') {\r\n      throw new Error('Unexpected asynchronous JSON validation');\r\n    }\r\n    if (isValid) {\r\n      return {\r\n        isValid,\r\n        errorMessage: null,\r\n      }\r\n    }\r\n    const firstError = validate.errors ? validate.errors[0] : undefined;\r\n    let errorMessage: string | null = null;\r\n    if (firstError?.message && firstError?.dataPath) {\r\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\": ${firstError.message}`\r\n    } else if (firstError?.message) {\r\n      errorMessage = `Error parsing configuration: ${firstError.message}`\r\n    } else if (firstError?.dataPath) {\r\n      errorMessage = `Error parsing configuration at \"${firstError.dataPath}\"`\r\n    } else {\r\n      errorMessage = `Error parsing configuration`;\r\n    }\r\n    console.error(errorMessage);\r\n    console.error('All configuration errors: ', validate.errors);\r\n    return {\r\n      isValid,\r\n      errorMessage,\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport default new ConfigService();\r\n","import React from 'react';\r\nimport { IConfig, IConfigPage } from '../common/models/config.model';\r\nimport HttpService from '../services/http.service';\r\n\r\nexport interface IAppContext {\r\n  config: IConfig | null\r\n  activePage: IConfigPage | null\r\n  error: string | null\r\n  setError: (error: string | null) => void\r\n  setActivePage: (activePage: IConfigPage | null) => void\r\n  httpService: HttpService\r\n}\r\n\r\nexport const AppContext = React.createContext<IAppContext>({\r\n  config: null,\r\n  activePage: null,\r\n  error: null,\r\n  setError: () => {},\r\n  setActivePage: () => {},\r\n  httpService: new HttpService()\r\n});","import React from 'react';\r\nimport { AppContext } from '../app.context';\r\n\r\nexport const withAppContext = (Component: any) => {\r\n  return (props: any) => (\r\n    <AppContext.Consumer>    \r\n      {(context) => {\r\n        return <Component {...props} context={context} />\r\n      }}\r\n    </AppContext.Consumer>\r\n  );\r\n};","import React from 'react';\r\n\r\nimport './loader.scss';\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <div className=\"app-loader cp-spinner cp-balls small\"></div>\r\n  );\r\n};","class PaginationHelpers {\r\n  public hasPreviousPage(page: string | number | undefined): boolean {\r\n    if (page === undefined) {\r\n      return false;\r\n    }\r\n\r\n    if (typeof page === 'string') {\r\n      return parseInt(page) > 1;\r\n    }\r\n\r\n    return page > 1;\r\n  }\r\n\r\n  public hasNextPage(_page: string | number, _itemsPerPage: string | number, _total: string | number | undefined): boolean {\r\n    if (_total === undefined) {\r\n      return true;\r\n    }\r\n    const page = typeof _page === 'string' ? parseInt(_page) : _page;\r\n    const itemsPerPage = typeof _itemsPerPage === 'string' ? parseInt(_itemsPerPage) : _itemsPerPage;\r\n    const total = typeof _total === 'string' ? parseInt(_total) : _total;\r\n\r\n    return page * itemsPerPage < total;\r\n  }\r\n}\r\n\r\nexport const paginationHelpers = new PaginationHelpers();","import React from 'react';\r\n\r\nimport './button.scss';\r\n\r\ninterface IProps {\r\n  children: any\r\n  type?: 'submit' | 'button' | 'reset'\r\n  title?: string\r\n  className?: string\r\n  onClick?: (e: any) => void\r\n  color?: 'gray' | 'blue' | 'green' | 'red'\r\n  disabled?: boolean\r\n}\r\n\r\nexport const Button = (props: IProps) => {\r\n  return (\r\n    <button {...props} className={`button ${props.className || ''} ${props.color || ''}`}>{props.children}</button>\r\n  );\r\n};","import React from 'react';\r\n\r\nimport './infiniteLoader.scss';\r\n\r\nexport const InfiniteLoader = () => {\r\n  return (\r\n    <div className=\"app-infinite-loader cp-spinner cp-balls small\"></div>\r\n  );\r\n};","import React from 'react';\r\nimport { ICustomLabels } from '../../common/models/config.model';\r\nimport { IPaginationState } from '../../common/models/states.model';\r\nimport { Button } from '../button/button.comp';\r\n\r\nimport './pagination.scss';\r\n\r\ninterface IProps {\r\n  pagination: IPaginationState\r\n  callbacks: {\r\n    previousPage: () => void,\r\n    nextPage: () => void,\r\n  }\r\n  customLabels?: ICustomLabels\r\n}\r\n\r\nexport const Pagination = ({ callbacks, pagination, customLabels }: IProps) => {\r\n  const previousTitle = customLabels?.pagination?.previousPageTitle || 'Previous page';\r\n  const nextTitle = customLabels?.pagination?.nextPageTitle || 'Next page';\r\n  return (\r\n    <div className=\"pagination-wrapper\">\r\n      <Button disabled={!pagination.hasPreviousPage} onClick={() => callbacks.previousPage()} title={previousTitle}>\r\n        <i className=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>\r\n      </Button>\r\n      <Button disabled={!pagination.hasNextPage} onClick={() => callbacks.nextPage()} title={nextTitle}>\r\n        <i className=\"fa fa-arrow-right\" aria-hidden=\"true\" ></i>\r\n      </Button>\r\n    </div>\r\n  );\r\n};","import React, { useEffect } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\n\r\nimport { IConfigDisplayField, IConfigCustomAction, ICustomLabels } from '../../common/models/config.model';\r\nimport { dataHelpers } from '../../helpers/data.helpers';\r\nimport { Button } from '../button/button.comp';\r\nimport { InfiniteLoader } from '../infiniteLoader/infiniteLoader.comp';\r\nimport { IPaginationState } from '../../common/models/states.model';\r\nimport { Pagination } from '../pagination/pagination.comp';\r\n\r\nimport './table.scss';\r\n\r\ninterface IProps {\r\n  items: any[]\r\n  pagination?: IPaginationState\r\n  callbacks: {\r\n    delete: ((item: any) => void) | null\r\n    put: ((item: any) => void) | null\r\n    action: (item: any, action: IConfigCustomAction) => void\r\n    getPreviousPage: (() => void) | null\r\n    getNextPage: (() => void) | null\r\n  }\r\n  fields: IConfigDisplayField[]\r\n  customActions?: IConfigCustomAction[]\r\n  customLabels?: ICustomLabels\r\n}\r\n\r\nexport const Table = ({ items, fields, pagination, callbacks, customActions, customLabels }: IProps) => {\r\n  const editLabel = customLabels?.buttons?.editItem || 'Edit';\r\n  const deleteLabel = customLabels?.buttons?.deleteItem || 'Delete';\r\n  const actionColumnHeader = customLabels?.tableColumnHeaders?.actions || 'Actions';\r\n  const paginationCallbacks = {\r\n    nextPage: callbacks.getNextPage || (() => { return; }),\r\n    previousPage: callbacks.getPreviousPage || (() => { return; }),\r\n  };\r\n\r\n  function renderTableCell(origField: IConfigDisplayField, origItem: any, value: any) {\r\n    if (origField.type === 'boolean') {\r\n      value = value ? true : false;\r\n    }\r\n\r\n    if (value && typeof value === 'object') {\r\n      return 'object';\r\n    }\r\n\r\n    switch (origField.type) {\r\n      case 'text':\r\n        return <span>{value}</span>;\r\n      case 'boolean':\r\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\r\n      case 'image':\r\n        return <img src={value || ''} alt={value || origField.label || origField.name} />;\r\n      case 'url':\r\n        let url: string = origField.url || value || '';\r\n\r\n        // Replace all url vars\r\n        fields.forEach((field) => {\r\n          const fieldValue = dataHelpers.extractDataByDataPath(origItem, field.dataPath, field.name);\r\n          url = url.replace(`:${field.name}`, fieldValue);\r\n        });\r\n\r\n        return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{origField.urlLabel || value}</a>;\r\n      case 'colorbox':\r\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\r\n      case 'html':\r\n        const htmlCode = origField.htmlCode || '<span>{value}</span>';\r\n        const html =  htmlCode.replace('{value}', value);\r\n        return <div dangerouslySetInnerHTML={{__html: html}}></div>\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  function renderTableRow(item: any, rowIdx: number) {\r\n    return (\r\n      <tr key={`tr_${rowIdx}`}>\r\n        {\r\n          fields.map((field, fieldIdx) => {\r\n            const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\r\n            return (\r\n              <td className={field.truncate ? 'truncate' : ''} key={`td_${rowIdx}_${fieldIdx}`}>\r\n                {renderTableCell(field, item, value)}\r\n              </td>\r\n            );\r\n          })\r\n        }\r\n        <td>\r\n          <div className=\"actions-wrapper\">\r\n            {\r\n              callbacks.put &&\r\n              <Button onClick={() => callbacks.put?.(item)} title={editLabel}>\r\n                <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n              </Button>\r\n            }\r\n            {\r\n              (customActions && customActions.length > 0) &&\r\n              customActions.map((action, idx) => (\r\n                <Button key={`action_${rowIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\r\n                  <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\r\n                </Button>\r\n              ))\r\n            }\r\n            {\r\n              callbacks.delete &&\r\n              <Button onClick={() => callbacks.delete?.(item)} title={deleteLabel}>\r\n                <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n              </Button>\r\n            }\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  function renderTableContent() {\r\n    return (\r\n      <table className=\"pure-table\">\r\n        <thead>\r\n          <tr>\r\n            {\r\n              fields.map((field) => {\r\n                return <th key={`th_${field.name}`}>{field.label || field.name}</th>;\r\n              })\r\n            }\r\n            <th>{actionColumnHeader}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            items.map(renderTableRow)\r\n          }\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      pagination?.type === 'infinite-scroll'\r\n      && document.body.clientHeight <= window.innerHeight\r\n      && pagination?.hasNextPage\r\n    ) {\r\n      paginationCallbacks.nextPage();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  if (pagination?.type === 'infinite-scroll') {\r\n    return (\r\n      <InfiniteScroll\r\n        dataLength={items.length}\r\n        next={callbacks.getNextPage || (() => null)}\r\n        hasMore={pagination?.hasNextPage || false}\r\n        loader={<InfiniteLoader />}\r\n      >\r\n        {renderTableContent()}\r\n      </InfiniteScroll>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"table-wrapper\">\r\n      {renderTableContent()}\r\n      {\r\n        pagination &&\r\n        pagination.type === 'buttons' &&\r\n        <Pagination\r\n          callbacks={paginationCallbacks}\r\n          pagination={pagination}\r\n          customLabels={customLabels}\r\n        ></Pagination>\r\n      }\r\n    </div >\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport Skeleton from 'react-loading-skeleton';\r\n\r\nimport { IConfigDisplayField, IConfigCustomAction, ICustomLabels } from '../../common/models/config.model';\r\nimport { IPaginationState } from '../../common/models/states.model';\r\nimport { dataHelpers } from '../../helpers/data.helpers';\r\nimport { Button } from '../button/button.comp';\r\nimport { Pagination } from '../pagination/pagination.comp';\r\n\r\nimport './cards.scss';\r\n\r\ninterface IProps {\r\n  items: any[]\r\n  pagination?: IPaginationState\r\n  callbacks: {\r\n    delete: ((item: any) => void) | null\r\n    put: ((item: any) => void) | null\r\n    action: (item: any, action: IConfigCustomAction) => void\r\n    getNextPage: (() => void) | null\r\n    getPreviousPage: (() => void) | null\r\n  }\r\n  fields: IConfigDisplayField[]\r\n  customActions?: IConfigCustomAction[]\r\n  customLabels?: ICustomLabels\r\n}\r\n\r\nexport const Cards = ({ items, fields, callbacks, customActions, customLabels, pagination }: IProps) => {\r\n  const editLabel: string = customLabels?.buttons?.editItem || 'Edit';\r\n  const deleteLabel: string = customLabels?.buttons?.deleteItem || 'Delete';\r\n  const paginationCallbacks = {\r\n    nextPage: callbacks.getNextPage || (() => { return; }),\r\n    previousPage: callbacks.getPreviousPage || (() => { return; }),\r\n  };\r\n\r\n  function renderRow(origField: IConfigDisplayField, origItem: any, value: any) {\r\n    if (origField.type === 'boolean') {\r\n      value = value ? true : false;\r\n    }\r\n\r\n    if (value && typeof value === 'object') {\r\n      return 'object';\r\n    }\r\n\r\n    switch (origField.type) {\r\n      case 'text':\r\n        return <span>{value}</span>;\r\n      case 'boolean':\r\n        return <div className={`bool ${value ? 'true' : 'false'}`}></div>;\r\n      case 'image':\r\n        if (!value) {\r\n          return <React.Fragment></React.Fragment>;\r\n        }\r\n        return <img src={value || ''} alt={value || origField.label || origField.name} />;\r\n      case 'url':\r\n        let url: string = origField.url || value || '';\r\n\r\n        // Replace all url vars\r\n        fields.forEach((field) => {\r\n          const fieldValue = dataHelpers.extractDataByDataPath(origItem, field.dataPath, field.name);\r\n          url = url.replace(`:${field.name}`, fieldValue);\r\n        });\r\n\r\n        return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{origField.urlLabel || value}</a>;\r\n      case 'colorbox':\r\n        return <div className=\"colorbox\" style={{ backgroundColor: value }}></div>;\r\n      case 'html':\r\n        const htmlCode = origField.htmlCode || '<span>{value}</span>';\r\n        const html =  htmlCode.replace('{value}', value);\r\n        return <div dangerouslySetInnerHTML={{__html: html}}></div>\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  function renderActions(item: any, cardIdx: number) {\r\n    return (\r\n      <div className=\"actions-wrapper\">\r\n        {\r\n          callbacks.put &&\r\n          <Button onClick={() => callbacks.put?.(item)} title={editLabel}>\r\n            <i className=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i>\r\n          </Button>\r\n        }\r\n        {\r\n          (customActions && customActions.length > 0) &&\r\n          customActions.map((action, idx) => (\r\n            <Button key={`action_${cardIdx}_${idx}`} onClick={() => callbacks.action(item, action)} title={action.name}>\r\n              <i className={`fa fa-${action.icon || 'cogs'}`} aria-hidden=\"true\"></i>\r\n            </Button>\r\n          ))\r\n        }\r\n        {\r\n          callbacks.delete &&\r\n          <Button onClick={() => callbacks.delete?.(item)} title={deleteLabel}>\r\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n          </Button>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderCard(item: any, cardIdx: number) {\r\n    return (\r\n      <div className=\"card\" key={`card_${cardIdx}`}>\r\n        {\r\n          fields.map((field, fieldIdx) => {\r\n            const value = dataHelpers.extractDataByDataPath(item, field.dataPath, field.name);\r\n            return (\r\n              <div className={`card-row ${field.type}`} key={`card_${cardIdx}_${fieldIdx}`}>\r\n                {\r\n                  field.type !== 'image' &&\r\n                  <label>{field.label || field.name}: </label>\r\n                }\r\n                {renderRow(field, item, value)}\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n        {renderActions(item, cardIdx)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderCardSkeleton(cardIdx: number) {\r\n    return (\r\n      <div className=\"card\" key={`card_${cardIdx}`}>\r\n        {\r\n          fields.map((field, fieldIdx) => {\r\n            return (\r\n              <div className={`card-row ${field.type}`} key={`card_${cardIdx}_${fieldIdx}`}>\r\n                {\r\n                  field.type !== 'image' &&\r\n                  <label>{field.label || field.name}: </label>\r\n                }\r\n                <Skeleton duration={0.6} />\r\n              </div>\r\n            );\r\n          })\r\n        }\r\n        {renderActions({}, cardIdx)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderSkeletons() {\r\n    const startingIndex = items.length;\r\n    const skeletonsIndexes = Array.from(Array(pagination?.limit).keys()).map(value => value + startingIndex);\r\n    return skeletonsIndexes.map(renderCardSkeleton);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      pagination?.type === 'infinite-scroll'\r\n      && document.body.clientHeight <= window.innerHeight\r\n      && callbacks.getNextPage\r\n      && pagination?.hasNextPage\r\n    ) {\r\n      callbacks.getNextPage();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  if (pagination?.type === 'infinite-scroll') {\r\n    return (\r\n      <InfiniteScroll className=\"cards-wrapper\"\r\n        dataLength={items.length}\r\n        next={callbacks.getNextPage || (() => null)}\r\n        hasMore={pagination?.hasNextPage || false}\r\n        loader={renderSkeletons()}\r\n      >\r\n        {items.map(renderCard)}\r\n      </InfiniteScroll>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"cards-wrapper\">\r\n        {items.map(renderCard)}\r\n      </div>\r\n      {\r\n        pagination &&\r\n        pagination.type === 'buttons' &&\r\n        <Pagination\r\n          callbacks={paginationCallbacks}\r\n          pagination={pagination}\r\n        ></Pagination>\r\n      }\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { orderBy } from 'natural-orderby';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { IConfigInputField, IConfigOptionSource, ICustomLabels } from '../../common/models/config.model';\r\nimport { Button } from '../button/button.comp';\r\nimport { withAppContext } from '../withContext/withContext.comp';\r\nimport { IAppContext } from '../app.context';\r\nimport { dataHelpers } from '../../helpers/data.helpers';\r\n\r\nimport './formRow.scss';\r\n\r\ninterface IProps {\r\n  context: IAppContext\r\n  field: IConfigInputField\r\n  onChange: (fieldName: string, value: any, submitAfterChange?: boolean) => void\r\n  showReset?: boolean\r\n  direction?: 'row' | 'column'\r\n}\r\n\r\nexport const FormRow = withAppContext(({ context, field, direction, showReset, onChange }: IProps) => {\r\n  const [optionSources, setOptionSources] = useState<any>({});\r\n  const { httpService, activePage, config } = context;\r\n  const pageHeaders: any = activePage?.requestHeaders || {};\r\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\r\n  const addArrayItemLabel = customLabels?.buttons?.addArrayItem || 'Add Item';\r\n  const clearLabel = customLabels?.buttons?.clearInput || 'Clear';\r\n\r\n  async function loadOptionSourceFromRemote(fieldName: string, optionSource: IConfigOptionSource) {\r\n    try {\r\n      const { url, dataPath, actualMethod, requestHeaders } = optionSource;\r\n\r\n      if (!url) {\r\n        throw new Error(`URL option source (for field \"${fieldName}\") is empty.`);\r\n      }\r\n\r\n      const result = await httpService.fetch({\r\n        method: actualMethod || 'get',\r\n        origUrl: url,\r\n        queryParams: [],\r\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}),\r\n      });\r\n\r\n      const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\r\n\r\n      if (!extractedData || !extractedData.length) {\r\n        throw new Error(`Option source data is empty (for field \"${fieldName}\")`);\r\n      }\r\n\r\n      // Map option source to fields\r\n      const optionSourceData = extractedData.map((option: any, idx: number) => {\r\n        const { valuePath, displayPath } = optionSource;\r\n\r\n        if (typeof option === 'string') {\r\n          return option;\r\n        }\r\n\r\n        return {\r\n          display: displayPath && option[displayPath] ? option[displayPath] : `Option ${idx + 1}`,\r\n          value: valuePath && option[valuePath] ? option[valuePath] : `${idx}`,\r\n        };\r\n      });\r\n\r\n      setOptionSources({\r\n        ...optionSources,\r\n        [fieldName]: optionSourceData\r\n      });\r\n    } catch (e) {\r\n      toast.error(e.message);\r\n    }\r\n  }\r\n\r\n  function addItemToFieldArray(e: any, originalField: IConfigInputField) {\r\n    e.preventDefault();\r\n\r\n    onChange(field.name, [\r\n      ...(originalField.value || []),\r\n      ''\r\n    ]);\r\n  }\r\n\r\n  function removeItemToFieldArray(originalField: IConfigInputField, idx: number) {\r\n    const updatedArray = [\r\n      ...(originalField.value || [])\r\n    ];\r\n\r\n    updatedArray.splice(idx, 1);\r\n\r\n    onChange(field.name, updatedArray);\r\n  }\r\n\r\n  function renderArrayItems(originalField: IConfigInputField) {\r\n    const array: any[] = originalField.value || [];\r\n\r\n    return (\r\n      <div className=\"array-form\">\r\n        {\r\n          array.map((item, itemIdx) => {\r\n            const inputField = renderFieldInput({\r\n              value: item,\r\n              name: `${originalField.name}.${itemIdx}`,\r\n            } as IConfigInputField, (fieldName, value) => {\r\n              const updatedArray = (originalField.value || []).map((localValue: any, idx: number) => {\r\n                if (idx === itemIdx) {\r\n                  return value;\r\n                }\r\n                return localValue;\r\n              });\r\n\r\n              onChange(originalField.name, updatedArray);\r\n            });\r\n\r\n            return (\r\n              <div className=\"array-form-item\" key={`array_form_${itemIdx}`}>\r\n                {inputField}\r\n                <i title={clearLabel} onClick={() => removeItemToFieldArray(originalField, itemIdx)} aria-label=\"Remove\" className=\"clear-input fa fa-times\"></i>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n        <Button className=\"add-array-item\" onClick={(e) => addItemToFieldArray(e, originalField)} title={addArrayItemLabel}>\r\n          <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  function renderFieldInput(field: IConfigInputField, changeCallback: (fieldName: string, value: any, submitAfterChange?: boolean) => void) {\r\n    const inputProps = (defaultPlaceholder: string = '') => {\r\n      return {\r\n        value: field.value,\r\n        placeholder: field.placeholder || defaultPlaceholder,\r\n        disabled: field.readonly,\r\n        required: field.required,\r\n        onChange: (e: any) => changeCallback(field.name, e.target.value),\r\n      };\r\n    };\r\n\r\n    switch (field.type) {\r\n      case 'boolean':\r\n        return <input type=\"checkbox\" {...inputProps()} checked={field.value} onChange={(e) => changeCallback(field.name, e.target.checked, true)} />;\r\n      case 'select':\r\n        {\r\n          const { optionSource } = field;\r\n\r\n          if (optionSource && !optionSources[field.name]) {\r\n            loadOptionSourceFromRemote(field.name, optionSource);\r\n            return <select {...inputProps()}><option>-- Loading Options... --</option></select>\r\n          }\r\n\r\n          const sortBy = field.optionSource?.sortBy;\r\n          const finalOptions: { value: string, display: string }[] = optionSources[field.name] || field.options || [];\r\n          const sortedOptions = orderBy(finalOptions, typeof sortBy === 'string' ? [sortBy] : (sortBy || []));\r\n\r\n          return (\r\n            <select {...inputProps()}>\r\n              <option>-- Select --</option>\r\n              {\r\n                sortedOptions.map((option, idx) => {\r\n                  const key = `option_${idx}_`;\r\n                  if (typeof option !== 'object') {\r\n                    return <option key={`${key}_${option}`} value={option}>{option}</option>\r\n                  }\r\n                  return <option key={`${key}_${option.value}`} value={option.value}>{option.display || option.value}</option>\r\n                })\r\n              }\r\n            </select>\r\n          );\r\n        };\r\n      case 'object':\r\n        return <textarea {...inputProps(customLabels?.placeholders?.object || 'Enter JSON...')}></textarea>;\r\n      case 'array': {\r\n        const { arrayType, value } = field;\r\n        if (!value || !arrayType || arrayType === 'object') {\r\n          return <textarea {...inputProps(customLabels?.placeholders?.array || 'Enter JSON array...')}></textarea>;\r\n        }\r\n        return renderArrayItems(field);\r\n      }\r\n      case 'long-text':\r\n        return <textarea {...inputProps(customLabels?.placeholders?.text || 'Enter text...')}></textarea>;\r\n      case 'number':\r\n      case 'integer':\r\n        return <input type=\"number\" {...inputProps(customLabels?.placeholders?.number || '0')} onChange={(e) => changeCallback(field.name, e.target.valueAsNumber)} />;\r\n      case 'color':\r\n        return <input type=\"color\" {...inputProps(customLabels?.placeholders?.color || 'Enter color...')} />;\r\n      case 'email':\r\n        return <input type=\"email\" {...inputProps(customLabels?.placeholders?.email || 'Enter email...')} />;\r\n      case 'password':\r\n        return <input type=\"password\" {...inputProps(customLabels?.placeholders?.password || 'Enter password...')} />;\r\n      case 'hidden':\r\n        return <input type=\"hidden\" value={field.value} />;\r\n      case 'file':\r\n        return <input type=\"file\" accept={field.accept || '*'} placeholder={field.placeholder || customLabels?.placeholders?.file || 'Select file...'} name={field.name || 'file'} disabled={field.readonly} required={field.required} />;\r\n      case 'note':\r\n        return <p className=\"note\">{field.value}</p>;\r\n      case 'date':\r\n        return <input type=\"date\" {...inputProps(customLabels?.placeholders?.date || 'Enter date...')} />;\r\n      case 'text':\r\n      default:\r\n        return <input type=\"text\" {...inputProps(customLabels?.placeholders?.text || 'Enter text...')} />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`form-row ${direction || 'row'}`}>\r\n      {\r\n        field.type !== 'hidden' &&\r\n        <label>{field.label || field.originalName}{field.required ? ' *' : ''}</label>\r\n      }\r\n      {renderFieldInput(field, onChange)}\r\n      {\r\n        (showReset && !field.readonly && field.value && field.value.length > 0) &&\r\n        <i title={clearLabel} onClick={() => onChange(field.name, '', true)} aria-label=\"Clear\" className=\"clear-input fa fa-times\"></i>\r\n      }\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport { IConfigInputField, IConfigPagination } from '../../common/models/config.model';\r\nimport { FormRow } from '../formRow/formRow.comp';\r\nimport { Button } from '../button/button.comp';\r\n\r\nimport './queryParams.scss';\r\n\r\ninterface IProps {\r\n  initialParams: IConfigInputField[]\r\n  paginationConfig?: IConfigPagination\r\n  submitCallback: (queryParams: IConfigInputField[], reset?: boolean) => void\r\n}\r\n\r\nexport const QueryParams = ({ initialParams, paginationConfig, submitCallback }: IProps) => {\r\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initialParams);\r\n\r\n  function submit(e?: any) {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\r\n      submitCallback(queryParams, true);\r\n    } else {\r\n      submitCallback(queryParams);\r\n    }\r\n  }\r\n\r\n  function formChanged(fieldName: string, value: any, submitAfterChange?: boolean) {\r\n    const updatedQueryParams: IConfigInputField[] = [...queryParams].map((field) => {\r\n      if (field.name === fieldName) {\r\n        field.value = value;\r\n      }\r\n\r\n      return field;\r\n    });\r\n\r\n    setQueryParams(updatedQueryParams);\r\n\r\n    if (submitAfterChange) {\r\n      submit();\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (paginationConfig && paginationConfig.type === 'infinite-scroll') {\r\n      const filteredParams = initialParams.filter(param => !['page', 'limit'].includes(param.name));\r\n      setQueryParams(filteredParams);\r\n    } else {\r\n      setQueryParams(initialParams);\r\n    }\r\n  }, [paginationConfig, initialParams]);\r\n\r\n  if (!queryParams.length) {\r\n    return <React.Fragment></React.Fragment>;\r\n  }\r\n\r\n  return (\r\n    <section className=\"query-params-form\">\r\n      <h5>Query Params:</h5>\r\n      <form onSubmit={submit}>\r\n        {\r\n          queryParams.map((queryParam, idx) => {\r\n            return (\r\n              <FormRow\r\n                key={`query_param_${idx}`}\r\n                field={queryParam}\r\n                onChange={formChanged}\r\n                showReset={!queryParam.type || queryParam.type === 'text'}\r\n              />\r\n            );\r\n          })\r\n        }\r\n        <Button type=\"submit\" onClick={submit}>Submit</Button>\r\n      </form>\r\n    </section>\r\n  );\r\n};","import React, { Component, RefObject, ReactChild } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './popup.scss';\r\nimport { ICustomLabels } from '../../common/models/config.model';\r\n\r\ninterface IPopupProps {\r\n  className?: string\r\n  style?: any\r\n  show: boolean\r\n  closeCallback: any\r\n  children: ReactChild\r\n  refCallback?: string | ((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null | undefined\r\n  customLabels?: ICustomLabels\r\n}\r\n\r\nlet portalRoot: HTMLDivElement = document.getElementById('popup-portal') as HTMLDivElement;\r\nif (!portalRoot) {\r\n  portalRoot = document.createElement('div');\r\n  portalRoot.setAttribute('id', 'popup-portal');\r\n  document.body.append(portalRoot);\r\n}\r\n\r\nclass PortalPopup extends Component {\r\n  private el: HTMLElement;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.el = document.createElement('div');\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    portalRoot.appendChild(this.el);\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    portalRoot.removeChild(this.el);\r\n  }\r\n\r\n  render() {\r\n    return ReactDOM.createPortal(this.props.children, this.el);\r\n  }\r\n}\r\n\r\nexport class Popup extends Component<IPopupProps> {\r\n  render() {\r\n    const style: any = Object.assign({}, { display: this.props.show ? 'block' : 'none' }, this.props.style || {});\r\n    const closeLabel = this.props.customLabels?.buttons?.closeForm || 'Close';\r\n\r\n    return (\r\n      <PortalPopup>\r\n        {\r\n          this.props.show ?\r\n            <div className={`popup ${this.props.className || ''}`} style={style}>\r\n              <div className=\"overlay\" onClick={(e: any) => this.props.closeCallback(e)}></div>\r\n              <div className=\"popup-content\" ref={this.props.refCallback}>\r\n                {this.props.children}\r\n                <button title={closeLabel} className=\"close-popup\" onClick={(e: any) => this.props.closeCallback(e)}>\r\n                  <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\r\n                </button>\r\n              </div>\r\n            </div> :\r\n            null\r\n        }\r\n      </PortalPopup>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this._handleKeyDown.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this._handleKeyDown.bind(this));\r\n  }\r\n\r\n  _handleKeyDown = (e: KeyboardEvent) => {\r\n    const { show, closeCallback } = this.props;\r\n\r\n    if (show && e.keyCode === 27) {\r\n      closeCallback(e);\r\n    }\r\n  }\r\n};","import { IConfigInputField } from '../common/models/config.model';\r\n\r\nclass FileHelpers {\r\n\r\n  public isMultipartForm(fields: IConfigInputField[]): boolean {\r\n    for (const fieldIndex in fields) {\r\n      let field = fields[fieldIndex];\r\n\r\n      if (field.type === 'file') {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport const fileHelpers = new FileHelpers();","import React, { useState, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { Popup } from '../popup/popup.comp';\r\nimport {\r\n  IConfigInputField,\r\n  IConfigGetSingleMethod,\r\n  IConfigPostMethod,\r\n  IConfigPutMethod,\r\n  ICustomLabels\r\n} from '../../common/models/config.model';\r\nimport { FormRow } from '../formRow/formRow.comp';\r\nimport { Button } from '../button/button.comp';\r\nimport { Loader } from '../loader/loader.comp';\r\nimport { dataHelpers } from '../../helpers/data.helpers';\r\nimport { fileHelpers } from '../../helpers/file.helpers';\r\nimport { IAppContext } from '../app.context';\r\nimport { withAppContext } from '../withContext/withContext.comp';\r\n\r\nimport './formPopup.scss';\r\n\r\nconst unflatten = require('flat').unflatten;\r\n\r\ninterface IProps {\r\n  context: IAppContext\r\n  title: string\r\n  fields: IConfigInputField[]\r\n  rawData?: any\r\n  getSingleConfig?: IConfigGetSingleMethod\r\n  methodConfig: IConfigPostMethod | IConfigPutMethod\r\n  closeCallback: (reloadData: boolean) => void\r\n  submitCallback: (body: any, containFiles: boolean) => void\r\n}\r\n\r\nexport const FormPopup = withAppContext(({ context, title, fields, rawData, getSingleConfig, methodConfig, submitCallback, closeCallback }: IProps) => {\r\n  const fieldsCopy: IConfigInputField[] = JSON.parse(JSON.stringify(fields));\r\n  const { httpService, activePage, config } = context;\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [formFields, setFormFields] = useState<IConfigInputField[]>([]);\r\n  const [finalRawData, setFinalRawData] = useState<any>(null);\r\n  const pageHeaders: any = activePage?.requestHeaders || {};\r\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\r\n\r\n  async function initFormFields() {\r\n    let finalRawData: any = rawData || {};\r\n\r\n    if (getSingleConfig && getSingleConfig.url) {\r\n      try {\r\n        const { url, requestHeaders, actualMethod, dataPath, queryParams } = getSingleConfig;\r\n        const result = await httpService.fetch({\r\n          method: actualMethod || 'get',\r\n          origUrl: url,\r\n          queryParams,\r\n          headers: Object.assign({}, pageHeaders,  requestHeaders || {}),\r\n          rawData,\r\n        });\r\n\r\n        const extractedData = dataHelpers.extractDataByDataPath(result, dataPath);\r\n\r\n        if (extractedData && typeof extractedData === 'object') {\r\n          finalRawData = extractedData;\r\n        }\r\n      } catch (e) {\r\n        console.error('Could not load single item\\'s data.', e);\r\n        toast.error('Could not load single item\\'s data.');\r\n      }\r\n    }\r\n\r\n    setFinalRawData(finalRawData); // Store the raw data for later.\r\n\r\n    setFormFields(fieldsCopy.map((field) => {\r\n      let key = field.name;\r\n\r\n      field.originalName = field.name;\r\n\r\n      let dataPathSplit: string[] = [];\r\n\r\n      if (field.dataPath) {\r\n        dataPathSplit = field.dataPath.split('.');\r\n        key = `${field.dataPath}.${field.name}`;\r\n      }\r\n\r\n      const lookup = () => {\r\n        let objToLookIn = finalRawData;\r\n        for(const pathElem of dataPathSplit) {\r\n          if(objToLookIn[pathElem] !== undefined && objToLookIn[pathElem] !== null) {\r\n            objToLookIn = objToLookIn[pathElem];\r\n          } else {\r\n            return undefined;\r\n          }\r\n        }\r\n        return objToLookIn[field.name];\r\n      }\r\n\r\n      const lookupValue = lookup();\r\n\r\n      // Changing field name to include datapath\r\n      // This will use us later for unflatten the final object\r\n      field.name = key;\r\n\r\n      if (dataHelpers.checkIfFieldIsObject(field)) {\r\n        if (lookupValue || field.value) {\r\n          field.value = JSON.stringify(lookupValue || field.value, null, '  ') || '';\r\n        }\r\n        return field;\r\n      }\r\n\r\n      if (field.type === 'array') {\r\n        field.value = lookupValue || field.value || [];\r\n        return field;\r\n      }\r\n\r\n      if (typeof lookupValue !== 'undefined') {\r\n        field.value = lookupValue;\r\n      } else {\r\n        // important in order to prevent controlled / uncontrolled components error\r\n        field.value = typeof field.value === 'undefined' ? '' : field.value;\r\n      }\r\n\r\n      return field;\r\n    }));\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  async function submitForm(e: any) {\r\n    e.preventDefault();\r\n\r\n    const finalObject: any = (methodConfig as IConfigPutMethod).includeOriginalFields ? Object.assign({}, finalRawData) : {};\r\n    const formData = new FormData();\r\n    const containFiles: boolean = fileHelpers.isMultipartForm(formFields);\r\n    let validationError = null;\r\n\r\n    formFields.forEach((field) => {\r\n      if (field.type === 'file') {\r\n        const fileInput: any = document.querySelector(`input[name=\"${field.name || 'file'}\"]`) as HTMLInputElement;\r\n\r\n        if (fileInput.files.length > 0) {\r\n          const firstFile = fileInput.files[0];\r\n          formData.append(field.name || 'file', firstFile, firstFile.name);\r\n        }\r\n        return;\r\n      }\r\n\r\n      finalObject[field.name] = field.value;\r\n\r\n      if (containFiles) {\r\n        formData.append(field.name, field.value);\r\n      }\r\n\r\n      // eslint-disable-next-line eqeqeq\r\n      if (field.required && field.type !== 'boolean' && !field.value && field.value != 0) {\r\n        validationError = 'Please fill up all required fields.';\r\n      }\r\n\r\n      if (dataHelpers.checkIfFieldIsObject(field) && field.value) {\r\n        try {\r\n          finalObject[field.name] = JSON.parse(field.value);\r\n        } catch (e) {\r\n          validationError = `Invalid JSON for field \"${field.name}\".`;\r\n        }\r\n      }\r\n\r\n      if (field.type === 'boolean') {\r\n        finalObject[field.name] = field.value || false;\r\n      }\r\n\r\n      if (field.type === 'encode') {\r\n        finalObject[field.name] = encodeURIComponent(field.value);\r\n      }\r\n    });\r\n\r\n    if (validationError) {\r\n      toast.error(validationError);\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      const body = containFiles ? formData : unflatten(finalObject);\r\n      await submitCallback(body, containFiles);\r\n\r\n      toast.success('Great Success!');\r\n\r\n      closeCallback(true);\r\n    } catch (e) {\r\n      toast.error(e.message);\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  function formChanged(fieldName: string, value: any) {\r\n    let updatedFormFields: IConfigInputField[] = JSON.parse(JSON.stringify(formFields));\r\n\r\n    updatedFormFields = updatedFormFields.map((field: IConfigInputField) => {\r\n      if (field.name === fieldName) {\r\n        field.value = value;\r\n      }\r\n\r\n      return field;\r\n    });\r\n\r\n    setFormFields(updatedFormFields);\r\n  }\r\n\r\n  useEffect(() => {\r\n    initFormFields();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Popup\r\n      show={true}\r\n      className=\"form-popup\"\r\n      closeCallback={() => closeCallback(false)}\r\n      customLabels={customLabels}\r\n    >\r\n      <React.Fragment>\r\n        <h2>{title}</h2>\r\n        <section>\r\n          {\r\n            loading ?\r\n            <Loader /> :\r\n            <form onSubmit={submitForm}>\r\n              {\r\n                formFields.map((field, idx) => {\r\n                  return (\r\n                    <FormRow\r\n                      key={`field_${idx}`}\r\n                      field={field}\r\n                      onChange={formChanged}\r\n                      showReset={!field.type || field.type === 'text'}\r\n                    />\r\n                  );\r\n                })\r\n              }\r\n              <div className=\"buttons-wrapper center\">\r\n                <Button type=\"submit\" onClick={submitForm} color=\"green\">Submit</Button>\r\n              </div>\r\n            </form>\r\n          }\r\n        </section>\r\n      </React.Fragment>\r\n    </Popup>\r\n  );\r\n});\r\n","import React from 'react';\r\n\r\nimport './filterField.scss';\r\n\r\ninterface IProps {\r\n  onChange: (filter: string) => void\r\n}\r\n\r\nexport const FilterField = ({ onChange }: IProps) => {\r\n  return (\r\n    <section className=\"filter-wrapper\">\r\n      <h5>Filter:</h5>\r\n      <div className=\"form-row\">\r\n        <input type=\"text\" placeholder=\"Search...\" onChange={(e) => onChange(e.target.value.toLowerCase())} />\r\n      </div>\r\n    </section>\r\n  );\r\n};","import { IPaginationState, IQueryPaginationState, IBodyPaginationState } from \"./states.model\";\r\n\r\nexport const isQueryPaginationState = (obj: IPaginationState): obj is IQueryPaginationState => {\r\n    return obj.source === 'query';\r\n}\r\n\r\nexport const isBodyPaginationState = (obj: IPaginationState): obj is IBodyPaginationState => {\r\n    return obj.source === 'body';\r\n}","import { IConfigPagination, IConfigBodyPagination, IConfigQueryPagination } from \"./config.model\";\r\n\r\nexport const isQueryPagination = (obj: IConfigPagination): obj is IConfigQueryPagination => {\r\n    return obj.source === 'query';\r\n}\r\n\r\nexport const isBodyPagination = (obj: IConfigPagination): obj is IConfigBodyPagination => {\r\n    return obj.source === 'body';\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport * as QueryString from 'query-string';\r\nimport { toast } from 'react-toastify';\r\nimport { orderBy } from 'natural-orderby';\r\nimport { find, remove } from 'lodash';\r\n\r\nimport { IAppContext } from '../app.context';\r\nimport { IConfigPage, IConfigMethods, IConfigGetAllMethod, IConfigPostMethod, IConfigPutMethod, IConfigDeleteMethod, IConfigInputField, IConfigCustomAction, IConfigGetSingleMethod, ICustomLabels, IConfigPagination } from '../../common/models/config.model';\r\nimport { IPaginationState, IQueryPaginationState, IBodyPaginationState } from '../../common/models/states.model';\r\nimport { withAppContext } from '../withContext/withContext.comp';\r\nimport { Loader } from '../loader/loader.comp';\r\nimport { dataHelpers } from '../../helpers/data.helpers';\r\nimport { paginationHelpers } from '../../helpers/pagination.helpers';\r\nimport { Table } from '../table/table.comp';\r\nimport { Cards } from '../cards/cards.comp';\r\nimport { QueryParams } from '../queryParams/queryParams.comp';\r\nimport { Button } from '../button/button.comp';\r\nimport { FormPopup } from '../formPopup/formPopup.comp';\r\nimport { FilterField } from '../filterField/filterField.comp';\r\nimport { isQueryPaginationState, isBodyPaginationState } from '../../common/models/states.types.helper';\r\nimport { isQueryPagination, isBodyPagination } from '../../common/models/config.types.helper';\r\n\r\nimport './page.scss';\r\n\r\ninterface IProps {\r\n  context: IAppContext\r\n}\r\n\r\ninterface IPopupProps {\r\n  type: 'add' | 'update' | 'action'\r\n  title: string\r\n  config: IConfigPostMethod | IConfigPutMethod\r\n  submitCallback: (body: any, containFiles: boolean) => void\r\n  getSingleConfig?: IConfigGetSingleMethod\r\n  rawData?: {}\r\n}\r\n\r\nconst buildInitQueryParamsAndPaginationState = (\r\n  initQueryParams: IConfigInputField[],\r\n  paginationConfig?: IConfigPagination,\r\n): {\r\n  initQueryParams: IConfigInputField[],\r\n  initialPagination?: IPaginationState,\r\n} => {\r\n    let initialPagination: IPaginationState | undefined = undefined;\r\n\r\n    if (paginationConfig) {\r\n      if(isQueryPagination(paginationConfig)) {\r\n        initialPagination = {\r\n          source: paginationConfig.source,\r\n          type: paginationConfig.type,\r\n          page: parseInt(paginationConfig.params?.page?.value || '1'),\r\n          limit: parseInt(paginationConfig.params?.limit?.value || '10'),\r\n          descending: paginationConfig.params?.descending?.value === 'true' || false,\r\n          hasPreviousPage: false,\r\n          hasNextPage: false,\r\n          sortBy: paginationConfig.params?.sortBy?.value,\r\n        };\r\n\r\n        if (!find(initQueryParams, { name: 'page' })) {\r\n          initQueryParams.push({\r\n            name: paginationConfig?.params?.page?.name,\r\n            label: paginationConfig?.params?.page?.label || 'Page',\r\n            value: initialPagination?.page\r\n          });\r\n        }\r\n\r\n        if (paginationConfig?.params?.limit && !find(initQueryParams, { name: 'limit' })) {\r\n          initQueryParams.push({\r\n            name: paginationConfig.params.limit.name,\r\n            label: paginationConfig.params.limit.label || 'Limit',\r\n            value: initialPagination?.limit\r\n          });\r\n        }\r\n\r\n        if (paginationConfig?.params?.descending && !find(initQueryParams, { name: 'descending' })) {\r\n          initQueryParams.push({\r\n            name: paginationConfig.params.descending.name,\r\n            label: paginationConfig.params.descending.label || 'Descending',\r\n            value: initialPagination?.descending\r\n          });\r\n        }\r\n\r\n        if (paginationConfig?.params?.sortBy && !find(initQueryParams, { name: 'sortBy' })) {\r\n          initQueryParams.push({\r\n            name: paginationConfig.params.sortBy.name,\r\n            label: 'Sort by',\r\n            value: initialPagination?.sortBy\r\n          });\r\n        }\r\n      } else if(isBodyPagination(paginationConfig)) {\r\n        initialPagination = {\r\n          source: 'body',\r\n          type: paginationConfig.type,\r\n          hasNextPage: false,\r\n          hasPreviousPage: false,\r\n          next: null,\r\n          previous: null,\r\n          limit: parseInt(paginationConfig.params?.limit?.value || '10')\r\n        }\r\n\r\n        if (paginationConfig?.params?.limit && !find(initQueryParams, { name: 'limit' })) {\r\n          initQueryParams.push({\r\n            name: paginationConfig.params.limit.name,\r\n            label: paginationConfig.params.limit.label || 'Limit',\r\n            value: initialPagination?.limit\r\n          });\r\n        }\r\n\r\n      } else {\r\n        throw new Error('unrecognized pagination');\r\n      }\r\n    }\r\n\r\n    return {\r\n      initQueryParams,\r\n      initialPagination\r\n    };\r\n};\r\n\r\nconst PageComp = ({ context }: IProps) => {\r\n  const { page } = useParams();\r\n  const { push, location } = useHistory();\r\n  const { activePage, error, setError, httpService, config } = context;\r\n  const pageHeaders: any = activePage?.requestHeaders || {};\r\n  const pageMethods: IConfigMethods | undefined = activePage?.methods;\r\n  const customActions: IConfigCustomAction[] = activePage?.customActions || [];\r\n  const getAllConfig: IConfigGetAllMethod | undefined = pageMethods?.getAll;\r\n  const paginationConfig = getAllConfig?.pagination;\r\n  const infiniteScroll = paginationConfig?.type === 'infinite-scroll';\r\n  const getSingleConfig: IConfigGetSingleMethod | undefined = pageMethods?.getSingle;\r\n  const postConfig: IConfigPostMethod | undefined = pageMethods?.post;\r\n  const putConfig: IConfigPutMethod | undefined = pageMethods?.put;\r\n  const deleteConfig: IConfigDeleteMethod | undefined = pageMethods?.delete;\r\n  const customLabels: ICustomLabels | undefined = { ...config?.customLabels, ...activePage?.customLabels };\r\n  const addItemLabel = customLabels?.buttons?.addItem || '+ Add Item';\r\n  const addItemFormTitle = customLabels?.formTitles?.addItem || 'Add Item';\r\n  const editItemFormTitle = customLabels?.formTitles?.editItem || 'Update Item';\r\n  const { initQueryParams, initialPagination } = buildInitQueryParamsAndPaginationState(getAllConfig?.queryParams || [], paginationConfig);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [openedPopup, setOpenedPopup] = useState<null | IPopupProps>(null);\r\n  const [queryParams, setQueryParams] = useState<IConfigInputField[]>(initQueryParams);\r\n  const [pagination, setPagination] = useState<IPaginationState | undefined>(initialPagination);\r\n  const [items, setItems] = useState<any[]>([]);\r\n  const [filter, setFilter] = useState<string>('');\r\n\r\n  function closeFormPopup(refreshData: boolean = false) {\r\n    setOpenedPopup(null);\r\n\r\n    if (refreshData === true) {\r\n      if (pagination?.type === 'infinite-scroll') {\r\n        setItems([]);\r\n        const updatedParams = [...queryParams];\r\n        remove(updatedParams, param => ['page', 'limit'].includes(param.name));\r\n        setQueryParams(buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams);\r\n      } else {\r\n        getAllRequest();\r\n      }\r\n    }\r\n  }\r\n\r\n  async function openEditPopup(rawData: any) {\r\n    const params: IPopupProps = {\r\n      rawData,\r\n      type: 'update',\r\n      title: editItemFormTitle,\r\n      config: putConfig as IConfigPutMethod,\r\n      getSingleConfig,\r\n      submitCallback: async (body: any, containFiles: boolean) => {\r\n        return await updateItem(body, rawData, containFiles);\r\n      }\r\n    };\r\n\r\n    setOpenedPopup(params);\r\n  }\r\n\r\n  function openCustomActionPopup(rawData: any, action: IConfigCustomAction) {\r\n    const params: IPopupProps = {\r\n      rawData,\r\n      type: 'action',\r\n      title: action.name || 'Custom Action',\r\n      config: action as IConfigCustomAction,\r\n      submitCallback: async (body: any, containFiles: boolean) => {\r\n        return await performAction(body, rawData, action, containFiles);\r\n      }\r\n    };\r\n\r\n    setOpenedPopup(params);\r\n  }\r\n\r\n  async function performAction(body: any, rawData: any, action: IConfigCustomAction, containFiles: boolean) {\r\n    const { url, requestHeaders, actualMethod } = action;\r\n\r\n    return await httpService.fetch({\r\n      method: actualMethod || 'put',\r\n      origUrl: url,\r\n      rawData,\r\n      body: containFiles ? body : JSON.stringify(body),\r\n      headers: {\r\n        ...pageHeaders,\r\n        ...(requestHeaders || {}),\r\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\r\n      },\r\n      responseType: 'boolean'\r\n    });\r\n  }\r\n\r\n  function extractQueryParams(params: IConfigInputField[]): IConfigInputField[] {\r\n    if(!paginationConfig || isQueryPagination(paginationConfig)) {\r\n      const parsedParams = QueryString.parse(location.search);\r\n      const finalQueryParams = params.map((queryParam) => {\r\n        if (typeof parsedParams[queryParam.name] !== 'undefined') {\r\n          queryParam.value = queryParam.type === 'boolean' ? (parsedParams[queryParam.name] === 'true') : decodeURIComponent(parsedParams[queryParam.name] as any);\r\n        } else {\r\n          queryParam.value = queryParam.value || '';\r\n        }\r\n        return queryParam;\r\n      });\r\n\r\n      setPagination(getUpdatedPaginationState(finalQueryParams, null))\r\n\r\n      return finalQueryParams;\r\n    } else {\r\n      return params;\r\n    }\r\n  }\r\n\r\n  async function fetchPageData(params: {\r\n    actualMethod: 'get' | 'put' | 'post' | 'patch' | 'delete', \r\n    url: string,\r\n    requestHeaders?: any,\r\n    dataPath: string,\r\n    dataTransform: any,\r\n    sortBy: any\r\n  }) {\r\n    const result = await httpService.fetch({\r\n      method: params.actualMethod || 'get',\r\n      origUrl: params.url,\r\n      queryParams,\r\n      headers: Object.assign({}, pageHeaders, params.requestHeaders || {})\r\n    });\r\n    let extractedData = dataHelpers.extractDataByDataPath(result, params.dataPath);\r\n\r\n    if (!extractedData) {\r\n      throw new Error('Could not extract data from response.');\r\n    }\r\n\r\n    if (!Array.isArray(extractedData)) {\r\n      throw new Error('Extracted data is invalid.');\r\n    }\r\n\r\n    if (typeof params.dataTransform === 'function') {\r\n      extractedData = await params.dataTransform(extractedData);\r\n    }\r\n\r\n    const orderedItems = orderBy(extractedData, typeof params.sortBy === 'string' ? [params.sortBy] : (params.sortBy || []));\r\n\r\n    if (paginationConfig) {\r\n      const total = paginationConfig.fields?.total ? dataHelpers.extractDataByDataPath(result, paginationConfig.fields.total.dataPath) : undefined;\r\n      const newPaginationState = getUpdatedPaginationState(queryParams, result, total);\r\n      if (newPaginationState) {\r\n        setPagination(newPaginationState);\r\n      }\r\n    }\r\n\r\n    if (infiniteScroll) {\r\n      setItems([...items, ...orderedItems]);\r\n    } else {\r\n      setItems(orderedItems);\r\n    }\r\n  }\r\n\r\n  async function getAllRequest() {\r\n    if (infiniteScroll) {\r\n      if(pagination) {\r\n        if(isQueryPaginationState(pagination)) {\r\n          if(pagination?.page !== 1) {\r\n            setLoading(false);\r\n          }\r\n        } else if( isBodyPaginationState(pagination)) {\r\n          if(pagination.previous) {\r\n            setLoading(false);\r\n          }\r\n        } else {\r\n          throw new Error('unrecognized pagination source');\r\n        }\r\n      }\r\n    } else {\r\n      setLoading(true);\r\n    }\r\n\r\n    setError(null);\r\n\r\n    try {\r\n      if (!getAllConfig) {\r\n        throw new Error('Get all method is not defined.');\r\n      }\r\n\r\n      if (paginationConfig && !pagination) {\r\n        throw new Error('Pagination not initialized.');\r\n      }\r\n\r\n      const { url, requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\r\n      await fetchPageData({\r\n        actualMethod: actualMethod,\r\n        url: url,\r\n        requestHeaders: requestHeaders,\r\n        dataPath: dataPath,\r\n        dataTransform: dataTransform,\r\n        sortBy: sortBy\r\n      });\r\n    } catch (e) {\r\n      setError(e.message);\r\n    }\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  async function addItem(body: any, containFiles?: boolean) {\r\n    if (!postConfig) {\r\n      throw new Error('Post method is not defined.');\r\n    }\r\n\r\n    const { url, requestHeaders, actualMethod } = postConfig;\r\n\r\n    return await httpService.fetch({\r\n      method: actualMethod || 'post',\r\n      origUrl: url,\r\n      body: containFiles ? body : JSON.stringify(body),\r\n      headers: {\r\n        ...pageHeaders,\r\n        ...(requestHeaders || {}),\r\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\r\n      },\r\n      responseType: 'boolean'\r\n    });\r\n  }\r\n\r\n  async function updateItem(body: any, rawData: any, containFiles?: boolean) {\r\n    if (!putConfig) {\r\n      throw new Error('Put method is not defined.');\r\n    }\r\n\r\n    const { url, requestHeaders, actualMethod } = putConfig;\r\n\r\n    return await httpService.fetch({\r\n      method: actualMethod || 'put',\r\n      origUrl: url,\r\n      rawData,\r\n      body: containFiles ? body : JSON.stringify(body),\r\n      headers: {\r\n        ...pageHeaders,\r\n        ...(requestHeaders || {}),\r\n        ...(containFiles ? {} : { 'content-type': 'application/json' })\r\n      },\r\n      responseType: 'boolean'\r\n    });\r\n  }\r\n\r\n  async function deleteItem(item: any) {\r\n    const approved: boolean = window.confirm('Are you sure you want to delete this item?');\r\n\r\n    if (!approved) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (!deleteConfig) {\r\n        throw new Error('Delete method is not defined.');\r\n      }\r\n\r\n      const { url, requestHeaders, actualMethod } = deleteConfig;\r\n      const success = await httpService.fetch({\r\n        method: actualMethod || 'delete',\r\n        origUrl: url,\r\n        rawData: item,\r\n        headers: Object.assign({}, pageHeaders, requestHeaders || {}),\r\n        responseType: 'boolean'\r\n      });\r\n\r\n      if (success) {\r\n        if (pagination?.type === 'infinite-scroll') {\r\n          setItems([]);\r\n          const updatedParams = [...queryParams];\r\n          remove(updatedParams, param => ['page', 'limit'].includes(param.name));\r\n          setQueryParams(buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams);\r\n        } else {\r\n          getAllRequest();\r\n        }\r\n      }\r\n    } catch (e) {\r\n      toast.error(e.message);\r\n    }\r\n  }\r\n\r\n  function submitQueryParams(updatedParams: IConfigInputField[], reset?: boolean) {\r\n    if (loading) {\r\n      return;\r\n    }\r\n    \r\n    if (reset) {\r\n      setItems([]);\r\n      remove(updatedParams, param => ['page', 'limit'].includes(param.name));\r\n      updatedParams = buildInitQueryParamsAndPaginationState(updatedParams, paginationConfig).initQueryParams;\r\n    }\r\n\r\n    setQueryParams(updatedParams);\r\n    setPagination(getUpdatedPaginationState(updatedParams, null));\r\n\r\n    let paramsToUrl = [...updatedParams];\r\n\r\n    if (paginationConfig?.type === 'infinite-scroll') {\r\n      paramsToUrl = paramsToUrl.filter(param => !['page', 'limit'].includes(param.name));\r\n    }\r\n\r\n    // Building query string\r\n    const queryState: string = paramsToUrl.map((queryParam, idx) => {\r\n      let value = queryParam.value;\r\n\r\n      if (queryParam.type === 'select' && value === '-- Select --') {\r\n          // default value means nothing was selected and thus we explicitly\r\n          // empty out the value in this case; otherwise the string '-- Select --'\r\n          // is used as the value for the given queryParams\r\n          value = '';\r\n      }\r\n\r\n      return `${idx === 0 ? '?' : ''}${queryParam.name}=${encodeURIComponent(value || '')}`;\r\n    }).join('&');\r\n\r\n    // Pushing query state to url\r\n    if (page && queryState) {\r\n      push(queryState);\r\n    }\r\n  }\r\n\r\n  function getUpdatedPaginationState(updatedParams: IConfigInputField[], result: any, total?: number): IPaginationState | undefined {\r\n    if (!paginationConfig) {\r\n      return;\r\n    }\r\n\r\n    if(isQueryPagination(paginationConfig)) {\r\n      if(pagination && !isQueryPaginationState(pagination)) {\r\n        throw new Error('unexpected pagination source ' + pagination.source)\r\n      }\r\n      const newState: IQueryPaginationState = pagination ? pagination : {\r\n        source: 'query',\r\n        type: paginationConfig.type,\r\n        page: parseInt(paginationConfig.params?.page?.value || '1'),\r\n        limit: parseInt(paginationConfig.params?.limit?.value || '10'),\r\n        descending: paginationConfig.params?.descending?.value === 'true' || false,\r\n        hasPreviousPage: false,\r\n        hasNextPage: false,\r\n        sortBy: paginationConfig.params?.sortBy?.value,\r\n      };\r\n\r\n      newState.total = total || pagination?.total;\r\n      newState.page = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.page?.name)?.value) || newState.page;\r\n      newState.limit = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.limit?.name)?.value) || newState.limit;\r\n      newState.descending = updatedParams.find(param => param.name === paginationConfig?.params?.descending?.name)?.value === 'true' || newState.descending;\r\n      newState.sortBy = updatedParams.find(param => param.name === paginationConfig?.params?.sortBy?.name)?.value || newState.sortBy;\r\n      newState.hasPreviousPage = paginationHelpers.hasPreviousPage(newState.page);\r\n      newState.hasNextPage = paginationHelpers.hasNextPage(newState.page, newState.limit, newState.total);\r\n      return newState;\r\n    } else if(isBodyPagination(paginationConfig)) {\r\n      if(pagination && !isBodyPaginationState(pagination)) {\r\n        throw new Error('unexpected pagination source ' + pagination.source)\r\n      }\r\n      const newState: IBodyPaginationState = pagination ? pagination : {\r\n        source: 'body',\r\n        type: paginationConfig.type,\r\n        next: result[paginationConfig.params.nextPath || 'next'],\r\n        previous: result[paginationConfig.params.prevPath || 'previous'],\r\n        hasNextPage: !!result[paginationConfig.params.nextPath || 'next'],\r\n        hasPreviousPage: !!result[paginationConfig.params.prevPath || 'previous'],\r\n        limit: parseInt(paginationConfig.params?.limit?.value || '10'),\r\n        total: result[paginationConfig.params.countPath || 'count']\r\n      };\r\n      if(result) {\r\n        newState.next = result[paginationConfig.params.nextPath || 'next'];\r\n        newState.previous = result[paginationConfig.params.prevPath || 'previous'];\r\n        newState.hasNextPage = !!result[paginationConfig.params.nextPath || 'next'];\r\n        newState.hasPreviousPage = !!result[paginationConfig.params.prevPath || 'previous'];\r\n        newState.total = result[paginationConfig.params.countPath || 'count'];\r\n      }\r\n      newState.limit = parseInt(updatedParams.find(param => param.name === paginationConfig?.params?.limit?.name)?.value) || newState.limit;\r\n      return newState;\r\n    } else {\r\n      throw new Error('unrecognized pagination source');\r\n    }\r\n  }\r\n\r\n  function renderItemsUI() {\r\n    if (loading) {\r\n      return <Loader />;\r\n    }\r\n\r\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\r\n    const fieldsToFilter = fields.filter((field) => (field.filterable)).map((field) => field.name);\r\n    let filteredItems = items;\r\n\r\n    if (filter && fieldsToFilter.length) {\r\n      filteredItems = items.filter((item) => {\r\n        let passFilter = false;\r\n        fieldsToFilter.forEach((fieldName) => {\r\n          const value = item[fieldName];\r\n          if (typeof value === 'string' && value.toLowerCase().indexOf(filter) >= 0) {\r\n            passFilter = true;\r\n          }\r\n        })\r\n        return passFilter;\r\n      });\r\n    }\r\n\r\n    if (!filteredItems.length) {\r\n      return <div className=\"app-error\">Nothing to see here. Result is empty.</div>;\r\n    }\r\n\r\n    const getNextPage = paginationConfig ? () => {\r\n      if(isQueryPagination(paginationConfig)) {\r\n        if(pagination && !isQueryPaginationState(pagination)) {\r\n          throw new Error('unexpected pagination source ' + pagination.source)\r\n        }\r\n        if (pagination?.page && queryParams.length > 0) {\r\n          const newPage = pagination?.page + 1;\r\n          const updatedParams = queryParams.map((param) => {\r\n            if (param.name === paginationConfig.params?.page?.name) {\r\n              return {\r\n                ...param,\r\n                value: newPage\r\n              }\r\n            }\r\n            return param;\r\n          });\r\n          submitQueryParams(updatedParams);\r\n        }\r\n      } else if(isBodyPagination(paginationConfig)) {\r\n        if(pagination && !isBodyPaginationState(pagination)) {\r\n          throw new Error('unexpected pagination source ' + pagination.source)\r\n        }\r\n        if(!getAllConfig || !pagination?.next) {\r\n          return;\r\n        }\r\n        const { requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\r\n        fetchPageData(\r\n          {\r\n            actualMethod: actualMethod,\r\n            url: pagination.next,\r\n            requestHeaders: requestHeaders,\r\n            dataPath: dataPath,\r\n            dataTransform: dataTransform,\r\n            sortBy: sortBy\r\n          }\r\n        )\r\n      } else {\r\n        throw new Error('unrecognized pagination source');\r\n      }\r\n    } : null;\r\n\r\n    const getPreviousPage = paginationConfig ? () => {\r\n      if(isQueryPagination(paginationConfig)) {\r\n        if(pagination && !isQueryPaginationState(pagination)) {\r\n          throw new Error('unexpected pagination source ' + pagination.source)\r\n        }\r\n        if (pagination?.page && pagination.page > 1 && queryParams.length > 0) {\r\n          const newPage = pagination?.page - 1;\r\n          const updatedParams = queryParams.map((param) => {\r\n            if (param.name === paginationConfig.params?.page?.name) {\r\n              return {\r\n                ...param,\r\n                value: newPage\r\n              }\r\n            }\r\n            return param;\r\n          });\r\n          submitQueryParams(updatedParams);\r\n        }\r\n      } else if(isBodyPagination(paginationConfig)) {\r\n        if(pagination && !isBodyPaginationState(pagination)) {\r\n          throw new Error('unexpected pagination source ' + pagination.source)\r\n        }\r\n        if(!getAllConfig || !pagination?.previous) {\r\n          return;\r\n        }\r\n        const { requestHeaders, actualMethod, dataPath, sortBy, dataTransform } = getAllConfig;\r\n        fetchPageData(\r\n          {\r\n            actualMethod: actualMethod,\r\n            url: pagination.previous,\r\n            requestHeaders: requestHeaders,\r\n            dataPath: dataPath,\r\n            dataTransform: dataTransform,\r\n            sortBy: sortBy\r\n          }\r\n        )\r\n      } else {\r\n        throw new Error('unrecognized pagination source');\r\n      }\r\n    } : null;\r\n\r\n    const callbacks = {\r\n      delete: deleteConfig ? deleteItem : null,\r\n      put: putConfig ? openEditPopup : null,\r\n      action: customActions.length ? openCustomActionPopup : () => { },\r\n      getNextPage,\r\n      getPreviousPage,\r\n    };\r\n\r\n    if (getAllConfig?.display.type === 'cards') {\r\n      return (\r\n        <Cards\r\n          pagination={pagination}\r\n          callbacks={callbacks}\r\n          fields={fields}\r\n          items={filteredItems}\r\n          customActions={customActions}\r\n          customLabels={customLabels}\r\n        />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Table\r\n        pagination={pagination}\r\n        callbacks={callbacks}\r\n        fields={fields}\r\n        items={filteredItems}\r\n        customActions={customActions}\r\n        customLabels={customLabels}\r\n      />\r\n    );\r\n  }\r\n\r\n  function renderPaginationStateLabel() {\r\n    if (loading || !items.length) {\r\n      return;\r\n    }\r\n    \r\n    if(!pagination || isQueryPaginationState(pagination)) {\r\n      const currentCountFrom = (((pagination?.page || 1) - 1) * (pagination?.limit || 10)) + 1;\r\n      const currentCountTo = currentCountFrom + items.length - 1;\r\n      let label: string = `Showing results ${currentCountFrom}-${currentCountTo} out of ${pagination?.total} items`;\r\n\r\n      if (pagination?.type === 'infinite-scroll') {\r\n        label = `Showing ${pagination?.total} items`;\r\n      }\r\n\r\n      if (customLabels?.pagination?.itemsCount) {\r\n        label = customLabels?.pagination?.itemsCount\r\n                .replace(':currentCountFrom', currentCountFrom as any)\r\n                .replace(':currentCountTo', currentCountFrom as any)\r\n                .replace(':totalCount', pagination?.total as any);\r\n      }\r\n\r\n      return (\r\n        <p className=\"center pagination-state\">\r\n          {label}\r\n        </p>\r\n      );\r\n    }\r\n    if(isBodyPaginationState(pagination)) {\r\n      // TODO: extract start end end in a meaningful manner from the API\r\n      // this is not something that id based pagination APIs support generally\r\n      let label: string = `Total Results: ${pagination?.total}`;\r\n      if (pagination?.type === 'infinite-scroll') {\r\n        label = `Showing ${pagination?.total} items`;\r\n      }\r\n\r\n      if (customLabels?.pagination?.itemsCount) {\r\n        label = customLabels?.pagination?.itemsCount\r\n                .replace(':totalCount', pagination?.total as any);\r\n      }\r\n\r\n      return (\r\n        <p className=\"center pagination-state\">\r\n          {label}\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  function renderPageContent() {\r\n    const fields = getAllConfig?.fields || getAllConfig?.display?.fields || [];\r\n    const fieldsToFilter = fields.filter((field) => (field.filterable)).map((field) => field.name);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <QueryParams\r\n          initialParams={queryParams}\r\n          paginationConfig={paginationConfig}\r\n          submitCallback={submitQueryParams}\r\n        />\r\n        {\r\n          fieldsToFilter.length > 0 &&\r\n          <FilterField onChange={setFilter} />\r\n        }\r\n        {\r\n          pagination?.total &&\r\n          renderPaginationStateLabel()\r\n        }\r\n        {\r\n          error ?\r\n          <div className=\"app-error\">{error}</div> :\r\n          renderItemsUI()\r\n        }\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    const nextActivePage: IConfigPage | null = context?.config?.pages?.filter((p, pIdx) => p.id === page || (pIdx + 1) === parseInt(page || ''))[0] || null;\r\n    context.setActivePage(nextActivePage);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    const { initQueryParams, initialPagination } = buildInitQueryParamsAndPaginationState(getAllConfig?.queryParams || [], paginationConfig);\r\n\r\n    setItems([]);\r\n    setQueryParams(extractQueryParams(initQueryParams));\r\n    setPagination(initialPagination);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [activePage]);\r\n\r\n  useEffect(() => {\r\n    // Load data when query params \r\n    getAllRequest();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [queryParams]);\r\n\r\n  return (\r\n    <div className=\"app-page\">\r\n      <header className=\"app-page-header\">\r\n        <hgroup>\r\n          <h2>{activePage?.name}</h2>\r\n          {\r\n            activePage?.description &&\r\n            <h4>{activePage?.description}</h4>\r\n          }\r\n        </hgroup>\r\n        {\r\n          postConfig &&\r\n          <Button className=\"add-item\" color=\"green\" onClick={() => setOpenedPopup({ type: 'add', title: addItemFormTitle, config: postConfig, submitCallback: addItem })}>{addItemLabel}</Button>\r\n        }\r\n      </header>\r\n      <main className=\"app-page-content\">\r\n        {renderPageContent()}\r\n      </main>\r\n      {\r\n        openedPopup &&\r\n        <FormPopup\r\n          title={openedPopup.title}\r\n          closeCallback={closeFormPopup}\r\n          submitCallback={openedPopup.submitCallback}\r\n          fields={openedPopup.config?.fields || []}\r\n          rawData={openedPopup.rawData}\r\n          getSingleConfig={openedPopup.getSingleConfig}\r\n          methodConfig={openedPopup.config}\r\n        />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const Page = withAppContext(PageComp);\r\n","import React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { IAppContext } from '../app.context';\r\nimport { withAppContext } from '../withContext/withContext.comp';\r\nimport { Button } from '../button/button.comp';\r\n\r\nimport './navigation.scss';\r\n\r\ninterface IProps {\r\n  context: IAppContext\r\n}\r\n\r\nconst NavigationComp = ({ context: { config } }: IProps) => {\r\n  const [isOpened, setIsOpened] = useState<boolean>(false);\r\n\r\n  return (\r\n    <nav className=\"app-nav\">\r\n      <Button className=\"app-nav-opener\" onClick={() => setIsOpened(!isOpened)}>\r\n        {\r\n          isOpened ? \r\n          <i className=\"fa fa-times\" aria-hidden=\"true\"></i> : \r\n          <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\r\n        }\r\n      </Button>\r\n\r\n      <div className={`app-nav-wrapper ${isOpened ? 'opened' : ''}`}>\r\n        <div className=\"app-nav-links\">\r\n          {\r\n            (config?.pages || []).map((page, idx) => (\r\n              <NavLink to={`/${page.id || idx + 1}`} activeClassName=\"active\" key={`page_${idx}`} onClick={() => setIsOpened(false)}>{page.name}</NavLink>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport const Navigation = withAppContext(NavigationComp);","import React from 'react';\r\nimport { ICustomStyles } from '../../common/models/config.model';\r\n\r\ninterface IProps {\r\n  styles: ICustomStyles\r\n}\r\n\r\nexport const CustomStyles = ({ styles }: IProps) => {\r\n  const cssVars = styles.vars || {};\r\n  const arr = [];\r\n  \r\n  for (const key in cssVars) {\r\n    arr.push(`--${key}: ${(cssVars as any)[key]}`);\r\n  }\r\n\r\n  return (\r\n    <style dangerouslySetInnerHTML={{ __html: `\r\n      :root {\r\n        ${arr.join(';')}\r\n      }\r\n    ` }}>\r\n    </style>\r\n  );\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { HashRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport ConfigService from '../services/config.service';\r\nimport { IConfig, IConfigPage } from '../common/models/config.model';\r\nimport { Page } from '../components/page/page.comp';\r\nimport { Navigation } from '../components/navigation/navigation.comp';\r\nimport { AppContext } from './app.context';\r\nimport HttpService from '../services/http.service';\r\nimport { CustomStyles } from './customStyles/customStyles.comp';\r\n\r\nimport './app.scss';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst httpService = new HttpService();\r\nconst defaultAppName: string = 'RESTool App';\r\n\r\nfunction changeFavicon(src: string) {\r\n  const link = document.createElement('link');\r\n  const oldLink = document.getElementById('favicon');\r\n  link.id = 'favicon';\r\n  link.rel = 'shortcut icon';\r\n  link.href = src;\r\n  if (oldLink) {\r\n   document.head.removeChild(oldLink);\r\n  }\r\n  document.head.appendChild(link);\r\n }\r\n\r\nfunction App() {\r\n  const [firstLoad, setFirstLoad] = useState<boolean>(true);\r\n  const [config, setConfig] = useState<IConfig | null>(null);\r\n  const [activePage, setActivePage] = useState<IConfigPage | null>(config?.pages?.[0] || null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const appName: string = config?.name || defaultAppName;\r\n  \r\n  async function loadConfig(url?: string): Promise<void> {\r\n    try {\r\n      const windowConfig = (window as any).RESTool?.config;\r\n      let remoteConfig: IConfig; \r\n      // Try to load config from window object first\r\n      if (!url && windowConfig) {\r\n        remoteConfig = Object.assign({}, windowConfig, {});\r\n      } else {\r\n        remoteConfig = url ? await ConfigService.getRemoteConfig(url) : await ConfigService.loadDefaultConfig();\r\n      }\r\n\r\n      // Setting global config for httpService\r\n      httpService.baseUrl = remoteConfig.baseUrl || '';\r\n      httpService.errorMessageDataPath = remoteConfig.errorMessageDataPath || '';\r\n      httpService.unauthorizedRedirectUrl = remoteConfig.unauthorizedRedirectUrl || '';\r\n      httpService.requestHeaders = remoteConfig.requestHeaders || {};\r\n      document.title = remoteConfig.name || defaultAppName;\r\n\r\n      if (remoteConfig?.favicon) {\r\n        changeFavicon(remoteConfig.favicon);\r\n      }\r\n\r\n      if (remoteConfig?.remoteUrl) {\r\n        return await loadConfig(remoteConfig.remoteUrl);\r\n      }\r\n\r\n      setConfig(remoteConfig);\r\n    } catch (e) {\r\n      console.error('Could not load config file', e);\r\n    }\r\n\r\n    setFirstLoad(false);\r\n  }\r\n\r\n  function scrollToTop(scrollDuration: number = 250) {\r\n    var cosParameter = window.scrollY / 2,\r\n    scrollCount = 0,\r\n    oldTimestamp = performance.now();\r\n\r\n    function step (newTimestamp: number) {\r\n      scrollCount += Math.PI / (scrollDuration / (newTimestamp - oldTimestamp));\r\n\r\n      if (scrollCount >= Math.PI) {\r\n        window.scrollTo(0, 0);\r\n      }\r\n\r\n      if (window.scrollY === 0) {\r\n        return;\r\n      }\r\n\r\n      window.scrollTo(0, Math.round(cosParameter + cosParameter * Math.cos(scrollCount)));\r\n      oldTimestamp = newTimestamp;\r\n      window.requestAnimationFrame(step);\r\n    }\r\n\r\n    window.requestAnimationFrame(step);\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadConfig();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const { isValid, errorMessage } = ConfigService.validateConfig(config);\r\n\r\n    if (!isValid) {\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      return;\r\n    }\r\n  }, [config]);\r\n\r\n  return (\r\n    <div className=\"restool-app\">\r\n      {\r\n        !config ?\r\n        <div className=\"app-error\">\r\n          {firstLoad ? 'Loading Configuration...' : 'Could not find config file.'}\r\n        </div> :\r\n        <AppContext.Provider value={{ config, activePage, setActivePage, error, setError, httpService }}>\r\n          {\r\n            config.customStyles &&\r\n            <CustomStyles\r\n              styles={config.customStyles}\r\n            />\r\n          }\r\n          <Router>\r\n            <aside>\r\n              <h1 title={appName} onClick={() => scrollToTop()}>{appName}</h1>\r\n              {\r\n                <Navigation />\r\n              }\r\n            </aside>\r\n            {\r\n              config &&\r\n              <Switch>\r\n                <Route exact path=\"/:page\" component={Page} />\r\n                <Redirect path=\"/\" to={`/${config?.pages?.[0]?.id || '1'}`} />\r\n              </Switch>\r\n            }\r\n            <ToastContainer\r\n              position={toast.POSITION.TOP_CENTER}\r\n              autoClose={4000}\r\n              draggable={false}\r\n            />\r\n          </Router>\r\n        </AppContext.Provider>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config: any) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config: any) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config: any) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}